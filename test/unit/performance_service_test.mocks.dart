// Mocks generated by the Mockito package.
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_annotation_target
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: unnecessary_import
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unnecessary_raw_strings
// ignore_for_file: unused_element
// ignore_for_file: unused_import
// ignore_for_file: unused_library_prefix

import 'dart:async' as _i4;

import 'package:flutter_ar_app/data/services/performance_service.dart' as _i1;
import 'package:flutter_ar_app/domain/entities/performance_metrics.dart' as _i2;
import 'package:flutter_ar_app/domain/entities/device_profile.dart' as _i3;
import 'package:mockito/annotations.dart' as _i5;

// ignore_for_file: type=lint
class MockPerformanceService extends _i5.Mock implements _i1.PerformanceService {
  MockPerformanceService() {
    _i5.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.PerformanceMetrics> get metricsStream =>
      (super.noSuchMethod(Invocation.getter(#metricsStream))
          as _i4.Stream<_i2.PerformanceMetrics>);
  @override
  _i4.Stream<String> get alertsStream =>
      (super.noSuchMethod(Invocation.getter(#alertsStream))
          as _i4.Stream<String>);
  @override
  Future<_i2.PerformanceMetrics> getCurrentMetrics() =>
      (super.noSuchMethod(Invocation.method(#getCurrentMetrics, []))
          as Future<_i2.PerformanceMetrics>);
  @override
  Future<void> startMonitoring() =>
      (super.noSuchMethod(Invocation.method(#startMonitoring, []))
          as Future<void>);
  @override
  Future<void> stopMonitoring() =>
      (super.noSuchMethod(Invocation.method(#stopMonitoring, []))
          as Future<void>);
  @override
  Future<List<_i2.PerformanceMetrics>> getMetricsHistory(
          {Duration? duration, int? limit}) =>
      (super.noSuchMethod(Invocation.method(#getMetricsHistory, [duration, limit]))
          as Future<List<_i2.PerformanceMetrics>>);
  @override
  Future<void> logPerformanceEvent(
          String eventName, _i2.PerformanceMetrics metrics) =>
      (super.noSuchMethod(
              Invocation.method(#logPerformanceEvent, [eventName, metrics]))
          as Future<void>);
  @override
  void dispose() =>
      super.noSuchMethod(Invocation.method(#dispose, [])) as void;
  @override
  Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []))
          as Future<void>);
}