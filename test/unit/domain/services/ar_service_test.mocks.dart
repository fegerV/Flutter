// Mocks generated by Mockito
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:flutter_ar_app/data/repositories/auth_repository.dart' as _i4;
import 'package:flutter_ar_app/data/repositories/animation_repository.dart' as _i5;
import 'package:flutter_ar_app/data/repositories/marker_repository.dart' as _i6;
import 'package:flutter_ar_app/data/repositories/user_asset_repository.dart' as _i7;
import 'package:flutter_ar_app/domain/entities/auth_token.dart' as _i8;
import 'package:flutter_ar_app/domain/entities/animation_metadata.dart' as _i9;
import 'package:flutter_ar_app/domain/entities/marker_definition.dart' as _i10;
import 'package:flutter_ar_app/domain/entities/user_asset.dart' as _i11;
import 'package:flutter_ar_app/core/error/failures.dart' as _i12;

class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#login, [], {#username: username, #password: password}),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken>>.value(
          _FakeEither_0<_i12.Failure, _i8.AuthToken>(
            this,
            Invocation.method(#login, [], {#username: username, #password: password}),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken>>);

  @override
  _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken>> refreshToken() =>
      (super.noSuchMethod(
        Invocation.method(#refreshToken, []),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken>>.value(
          _FakeEither_0<_i12.Failure, _i8.AuthToken>(
            this,
            Invocation.method(#refreshToken, []),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken>>);

  @override
  _i2.Future<_i3.Either<_i12.Failure, void>> logout() =>
      (super.noSuchMethod(
        Invocation.method(#logout, []),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, void>>.value(
          _FakeEither_0<_i12.Failure, void>(
            this,
            Invocation.method(#logout, []),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, void>>);

  @override
  _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken?>> getCachedToken() =>
      (super.noSuchMethod(
        Invocation.method(#getCachedToken, []),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken?>>.value(
          _FakeEither_0<_i12.Failure, _i8.AuthToken?>(
            this,
            Invocation.method(#getCachedToken, []),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, _i8.AuthToken?>>);

  @override
  _i2.Future<bool> isAuthenticated() =>
      (super.noSuchMethod(
        Invocation.method(#isAuthenticated, []),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
}

class MockAnimationRepository extends _i1.Mock implements _i5.AnimationRepository {
  MockAnimationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i12.Failure, List<_i9.AnimationMetadata>>> getAnimations({
    int? page,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getAnimations, [], {#page: page, #limit: limit}),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, List<_i9.AnimationMetadata>>>.value(
          _FakeEither_0<_i12.Failure, List<_i9.AnimationMetadata>>(
            this,
            Invocation.method(#getAnimations, [], {#page: page, #limit: limit}),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, List<_i9.AnimationMetadata>>>);
}

class MockMarkerRepository extends _i1.Mock implements _i6.MarkerRepository {
  MockMarkerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i12.Failure, List<_i10.MarkerDefinition>>> getMarkers({
    int? page,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getMarkers, [], {#page: page, #limit: limit}),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, List<_i10.MarkerDefinition>>>.value(
          _FakeEither_0<_i12.Failure, List<_i10.MarkerDefinition>>(
            this,
            Invocation.method(#getMarkers, [], {#page: page, #limit: limit}),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, List<_i10.MarkerDefinition>>>);
}

class MockUserAssetRepository extends _i1.Mock implements _i7.UserAssetRepository {
  MockUserAssetRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<_i3.Either<_i12.Failure, List<_i11.UserAsset>>> getUserAssets({
    int? page,
    int? limit,
    String? assetType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#getUserAssets, [], {#page: page, #limit: limit, #assetType: assetType}),
        returnValue: _i2.Future<_i3.Either<_i12.Failure, List<_i11.UserAsset>>>.value(
          _FakeEither_0<_i12.Failure, List<_i11.UserAsset>>(
            this,
            Invocation.method(#getUserAssets, [], {#page: page, #limit: limit, #assetType: assetType}),
          ),
        ),
      ) as _i2.Future<_i3.Either<_i12.Failure, List<_i11.UserAsset>>>);
}

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}
